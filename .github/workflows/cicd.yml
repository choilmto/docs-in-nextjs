name: cicd

on:
  pull_request:
    branches: main

jobs:
  terraform_ecr:
    name: Create or update ecr
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: "./terraform/mgmt"
    outputs:
      ecr_address: ${{ steps.ecr_artifacts.outputs.addr }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"
      -
        name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      -
        name: Initialize terraform
        run: terraform init
      -
        name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      -
        name: Terraform Plan
        id: plan
        run: terraform plan -no-color        
      -
        name: Apply changes to terraform files
        run: terraform apply -auto-approve
      -
        id: ecr_artifacts
        name: Get ecr artifacts
        run: echo "addr=$(terraform state pull | jq -r '.resources[].instances[].attributes.repository_url')" >> $GITHUB_OUTPUT

  dockerize:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: terraform_ecr
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push jest tests
        uses: docker/build-push-action@v6
        with:
          target: "test-jest"
          tags: test-jest
          load: true
      -
        name: Jest tests
        run: docker run --rm test-jest
      -
        name: Build and push playwright tests
        uses: docker/build-push-action@v6
        with:
          target: "test-playwright"
          tags: test-playwright
          load: true
      -
        name: Playwright tests
        run: docker run --rm test-playwright
      -
        id: get_registry
        name: Get registry
        run: echo "registry=${{ needs.terraform_ecr.outputs.ecr_address }}" | cut -d '/' -f 1 >> $GITHUB_OUTPUT
      -
        name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.get_registry.outputs.registry }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      -
        name: Get tag
        id: get_tag
        run: echo "tag=${{ format ('{0}:{1}', needs.terraform_ecr.outputs.ecr_address, github.sha) }}" >> $GITHUB_OUTPUT
      -
        name: Build and push to local registry
        uses: docker/build-push-action@v6
        with:
          push: true
          target: prod
          tags: ${{ steps.get_tag.outputs.tag }}
          provenance: false

  terraform_app:
    name: Create or update serverless services for app
    runs-on: ubuntu-latest
    needs: dockerize
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_image_id: ${{ needs.dockerize.outputs.tag }}
    defaults:
      run:
        working-directory: "./terraform/prd"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.0"
      -
        name: Terraform fmt
        id: fmt
        run: terraform fmt -check          
      -
        name: Initialize terraform
        run: terraform init
      -
        name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      -
        name: Terraform Plan
        id: plan
        run: terraform plan -no-color      
      -
        name: Apply changes to terraform files
        run: terraform apply -auto-approve
      -
        name: Print application address
        run: echo "Deployed at $(terraform state pull | jq -r '.resources[].instances[].attributes.api_endpoint')"
